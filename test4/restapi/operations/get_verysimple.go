// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetVerysimpleHandlerFunc turns a function with the right signature into a get verysimple handler
type GetVerysimpleHandlerFunc func(GetVerysimpleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVerysimpleHandlerFunc) Handle(params GetVerysimpleParams) middleware.Responder {
	return fn(params)
}

// GetVerysimpleHandler interface for that can handle valid get verysimple params
type GetVerysimpleHandler interface {
	Handle(GetVerysimpleParams) middleware.Responder
}

// NewGetVerysimple creates a new http.Handler for the get verysimple operation
func NewGetVerysimple(ctx *middleware.Context, handler GetVerysimpleHandler) *GetVerysimple {
	return &GetVerysimple{Context: ctx, Handler: handler}
}

/*GetVerysimple swagger:route GET /verysimple getVerysimple

Retrieve some records from the Cassandra table

Returns rows from the Cassandra table

*/
type GetVerysimple struct {
	Context *middleware.Context
	Handler GetVerysimpleHandler
}

func (o *GetVerysimple) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetVerysimpleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetVerysimpleOKBodyItems0 get verysimple o k body items0
//
// swagger:model GetVerysimpleOKBodyItems0
type GetVerysimpleOKBodyItems0 struct {

	// id
	// Required: true
	ID *int64 `json:"id"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get verysimple o k body items0
func (o *GetVerysimpleOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVerysimpleOKBodyItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetVerysimpleOKBodyItems0) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetVerysimpleOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVerysimpleOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetVerysimpleOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
